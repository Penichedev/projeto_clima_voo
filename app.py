import streamlit as st
import os
from dotenv import load_dotenv
from openai import OpenAI
from fpdf import FPDF
from datetime import datetime
from io import BytesIO
import pandas as pd

# Carregar a chave da API do .env
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("‚ö†Ô∏è OPENAI_API_KEY n√£o encontrada no .env.")
    st.stop()

# Autentica√ß√£o simples
USUARIOS_AUTORIZADOS = {
    "usuario1": "senha123",
    "usuario2": "segredo456"
}

with st.sidebar:
    st.header("üîí Acesso Restrito")
    login_user = st.text_input("Usu√°rio")
    login_pass = st.text_input("Senha", type="password")
    login_ok = st.button("Entrar")

if not (login_user in USUARIOS_AUTORIZADOS and USUARIOS_AUTORIZADOS[login_user] == login_pass):
    st.warning("Informe credenciais v√°lidas para continuar.")
    st.stop()

# Inicializa cliente OpenAI
client = OpenAI(api_key=api_key)

# Hist√≥rico por sess√£o
if "historico" not in st.session_state:
    st.session_state.historico = []

# Prompt de consulta
def gerar_clima_com_margem(aeroporto, horario, rota, niveis_voo, trimestres):
    prompt = f"""
Considere as seguintes informa√ß√µes fornecidas pelo usu√°rio para gerar dados meteorol√≥gicos m√©dios aplic√°veis √† opera√ß√£o aeron√°utica:

1. Aeroporto de interesse: {aeroporto}
2. Hor√°rio da decolagem: {horario} (local ou UTC)
3. Rota planejada: {rota}
4. N√≠veis de voo por trecho: {niveis_voo}
5. Trimestres selecionados: {', '.join(trimestres)}

Com base nessas informa√ß√µes, forne√ßa:

- Temperatura m√©dia e ajuste QNH esperados para o hor√°rio informado no aeroporto de decolagem, utilizando climatologia hist√≥rica, dados oficiais e convers√£o correta para UTC conforme o fuso do aeroporto.
- Para cada trecho da rota informado, apresente:
   - O componente m√©dio do vento (W/C), j√° ajustado com margem de seguran√ßa de 85%
   - O desvio de temperatura em rela√ß√£o √† atmosfera padr√£o (ISA DEV), tamb√©m com margem de seguran√ßa

Formato de sa√≠da por trimestre:

QX  
W/C Mxxx     ISA DEV Pxx

Evite explica√ß√µes adicionais ‚Äî retorne apenas os dados solicitados, de forma objetiva, como se fosse um briefing t√©cnico.
"""
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Erro ao consultar API: {e}"

# Exporta√ß√µes
def exportar_resultado(resposta, formato, nome_base):
    if formato == "TXT":
        return resposta.encode("utf-8"), f"{nome_base}.txt"

    elif formato == "XML":
        xml = f"<?xml version='1.0'?><consulta><resultado><![CDATA[{resposta}]]></resultado></consulta>"
        return xml.encode("utf-8"), f"{nome_base}.xml"

    elif formato == "PDF":
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=10)
        for line in resposta.splitlines():
            pdf.cell(200, 5, txt=line, ln=True)
        buffer = BytesIO()
        pdf.output(buffer)
        buffer.seek(0)
        return buffer, f"{nome_base}.pdf"

    elif formato == "Excel":
        linhas = resposta.strip().split("\n")
        dados = [l.split() for l in linhas if l.strip() and not l.startswith("Q")]
        colunas = ["Coluna1", "Coluna2", "Coluna3"][:max(map(len, dados))]
        df = pd.DataFrame(dados, columns=colunas)
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
            df.to_excel(writer, index=False, sheet_name="Resultados")
        buffer.seek(0)
        return buffer, f"{nome_base}.xlsx"

    else:
        return resposta.encode("utf-8"), f"{nome_base}.txt"

# UI
st.set_page_config(page_title="Consulta Meteorol√≥gica", layout="centered")
st.title("üõ´ Consulta Meteorol√≥gica com Margem de Seguran√ßa")

aeroporto_origem = st.text_input("Aeroporto (ICAO)", "SKBO")
horario_utc = st.time_input("Hor√°rio de Decolagem (UTC)")
rota = st.text_area("Rota (fixos, aerovias, ICAO)", height=100)
fls = st.text_input("N√≠veis de voo por ponto (ex: TERAS/F340 JCL/F360)", "")
trimestres = st.multiselect("Selecione um ou mais trimestres", ["Q1", "Q2", "Q3", "Q4"])

if st.button("Consultar"):
    if not aeroporto_origem or not rota or not fls or not trimestres:
        st.warning("‚ö†Ô∏è Preencha todos os campos antes de consultar.")
    else:
        resposta = gerar_clima_com_margem(aeroporto_origem, horario_utc, rota, fls, trimestres)
        st.markdown("### üìä Estimativas com Margem de Seguran√ßa (85%) ‚Äì Resultado:")
        st.code(resposta, language="markdown")

        st.session_state.historico.append({
            "usuario": login_user,
            "data": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "aeroporto": aeroporto_origem,
            "resultado": resposta
        })

        formato = st.selectbox("Escolha o formato para exportar:", ["TXT", "XML", "PDF", "Excel"])
        if st.button("üì• Exportar Resultado"):
            nome_base = f"consulta_{aeroporto_origem}_{datetime.now().strftime('%Y%m%d_%H%M')}"
            arquivo, nome = exportar_resultado(resposta, formato, nome_base)
            st.download_button(f"‚¨áÔ∏è Baixar como {formato}", data=arquivo, file_name=nome, mime="application/octet-stream")

if st.checkbox("üìÑ Mostrar hist√≥rico da sess√£o"):
    if st.session_state.historico:
        for h in reversed(st.session_state.historico):
            st.markdown(f"**Usu√°rio:** {h['usuario']}  |  **Data:** {h['data']}  |  **Aeroporto:** {h['aeroporto']}")
            st.code(h['resultado'], language="markdown")
            st.markdown("---")
    else:
        st.info("Nenhuma consulta realizada nesta sess√£o.")
